// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portfolio.Server.Data;

namespace Portfolio.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("Portfolio.Shared.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BodyMarkdown")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Portfolio.Shared.ProjectCategory", b =>
                {
                    b.Property<int>("ProjectCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectCategoryId");

                    b.ToTable("ProjectsCategories");
                });

            modelBuilder.Entity("Portfolio.Shared.ProjectTechnology", b =>
                {
                    b.Property<int>("ProjectTechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectTechnologyId");

                    b.ToTable("ProjectsTechnologies");
                });

            modelBuilder.Entity("ProjectProjectCategory", b =>
                {
                    b.Property<int>("ProjectCategoriesProjectCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectCategoriesProjectCategoryId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("ProjectProjectCategory");
                });

            modelBuilder.Entity("ProjectProjectTechnology", b =>
                {
                    b.Property<int>("ProjectTechnologiesProjectTechnologyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectTechnologiesProjectTechnologyId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("ProjectProjectTechnology");
                });

            modelBuilder.Entity("ProjectProjectCategory", b =>
                {
                    b.HasOne("Portfolio.Shared.ProjectCategory", null)
                        .WithMany()
                        .HasForeignKey("ProjectCategoriesProjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portfolio.Shared.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectProjectTechnology", b =>
                {
                    b.HasOne("Portfolio.Shared.ProjectTechnology", null)
                        .WithMany()
                        .HasForeignKey("ProjectTechnologiesProjectTechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portfolio.Shared.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
